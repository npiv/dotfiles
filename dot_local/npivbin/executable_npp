#!/bin/bash

# Create a new Python project following the guidelines
# Usage: ./new_project_setup.sh <project_name>

set -e  # Exit on any error

if [ $# -eq 0 ]; then
    echo "Usage: ./new_project_setup.sh <project_name>"
    exit 1
fi

PROJECT_NAME=$1
PACKAGE_NAME=$(echo "${PROJECT_NAME}" | tr '-' '_' | tr '[:upper:]' '[:lower:]')

echo "Creating new Python project: ${PROJECT_NAME}"

# Create project directory
mkdir -p "${PROJECT_NAME}"
cd "${PROJECT_NAME}"

# Create directory structure
mkdir -p .github/workflows
mkdir -p docs/{api,guides}
mkdir -p src/"${PACKAGE_NAME}"/subpackage
mkdir -p tests/test_subpackage

# Create initial files
touch .github/workflows/ci.yml
touch docs/index.md
touch docs/api/.gitkeep
touch docs/guides/.gitkeep

# Create source files
cat > src/"${PACKAGE_NAME}"/__init__.py << EOF
"""${PROJECT_NAME} package."""

__version__ = "0.1.0"
EOF

cat > src/"${PACKAGE_NAME}"/main.py << EOF
"""Main module for ${PROJECT_NAME}."""


def main() -> None:
    """Run the main program."""
    print("Hello from ${PROJECT_NAME}!")


if __name__ == "__main__":
    main()
EOF

cat > src/"${PACKAGE_NAME}"/subpackage/__init__.py << EOF
"""Subpackage for ${PROJECT_NAME}."""
EOF

cat > src/"${PACKAGE_NAME}"/subpackage/module.py << EOF
"""Example module in subpackage."""


def example_function(param1: str, param2: int) -> bool:
    """Example function with Google-style docstring.
    
    Args:
        param1: Description of first parameter
        param2: Description of second parameter
        
    Returns:
        Boolean result
        
    Raises:
        ValueError: When parameters are invalid
    """
    if not param1 or param2 < 0:
        raise ValueError("Invalid parameters")
    return True
EOF

# Create test files
cat > tests/conftest.py << EOF
"""Shared pytest fixtures."""

import pytest


@pytest.fixture
def example_fixture() -> dict:
    """Return example data for tests."""
    return {"key": "value"}
EOF

cat > tests/test_module.py << EOF
"""Tests for the main module."""

import pytest

from ${PACKAGE_NAME} import main


def test_main() -> None:
    """Test the main function."""
    # This is a placeholder test
    assert True
EOF

cat > tests/test_subpackage/test_module.py << EOF
"""Tests for the subpackage module."""

import pytest

from ${PACKAGE_NAME}.subpackage.module import example_function


def test_example_function() -> None:
    """Test the example function."""
    assert example_function("test", 1) is True
    
    with pytest.raises(ValueError):
        example_function("", -1)
EOF

# Create .gitignore
cat > .gitignore << EOF
# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Unit test / coverage reports
htmlcov/
.tox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
.hypothesis/
.pytest_cache/

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# IDE files
.idea/
.vscode/
*.swp
*.swo

# Project specific
.DS_Store
EOF

# Create README.md
cat > README.md << EOF
# ${PROJECT_NAME}

## Description

A brief description of the project.

## Installation

\`\`\`bash
# Create a virtual environment
uv venv

# Activate the virtual environment
source .venv/bin/activate  # On Unix/Linux
# or
.venv\\Scripts\\activate  # On Windows

# Install package with development dependencies
uv pip install -e ".[dev]"
\`\`\`

## Usage

Basic usage example:

\`\`\`python
from ${PACKAGE_NAME} import main

main.main()
\`\`\`

## Development

### Setup

\`\`\`bash
# Install development dependencies
uv pip install -e ".[dev]"
\`\`\`

### Testing

\`\`\`bash
# Run tests
pytest

# Run tests with coverage
pytest --cov=${PACKAGE_NAME}
\`\`\`

EOF


# Create pyproject.toml
cat > pyproject.toml << EOF
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "${PROJECT_NAME}"
version = "0.1.0"
description = "Project description"
readme = "README.md"
requires-python = ">=3.10"
authors = [
    {name = "Author Name", email = "author.email@example.com"},
]
dependencies = [
    # Core dependencies
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.2",
    "pytest-cov>=4.1.0",
]

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib", "--cov=src", "--cov-report=term-missing"]
testpaths = ["tests"]

EOF

# Create GitHub workflow file for CI
cat > .github/workflows/ci.yml << EOF
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: \${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python \${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: \${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install uv
        uv pip install -e ".[dev]"
    - name: Test with pytest
      run: |
        pytest --cov=src --cov-report=xml
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
EOF

# Get Claude file
wget https://gist.githubusercontent.com/npiv/147c8b84174dadbcc71a69ab01ab2901/raw/580a2028861465f535b7d22888b4b6d833143f7f/CLAUDE.md

# Initialize git repository
git init
git add .

# Create venv and install dependencies
echo "Setting up virtual environment..."
uv venv
source .venv/bin/activate || . .venv/bin/activate

# Install dependencies
echo "Installing dependencies..."
uv pip install -e ".[dev]"

# Generate lock file
echo "Generating lock file..."
uv pip compile --output-file uv.lock pyproject.toml
#read -p "Press enter to continue"

# Make initial commit
git add uv.lock
git commit -m "Initial project setup"

echo "Project ${PROJECT_NAME} created successfully!"
echo "To start developing:"
echo "  cd ${PROJECT_NAME}"
echo "  source .venv/bin/activate  # On Unix/Linux"
echo "  # or"
echo "  .venv\\Scripts\\activate  # On Windows"
